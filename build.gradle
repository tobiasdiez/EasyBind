plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.hibernate.build.maven-repo-auth' version '3.0.3'
    id 'org.javamodularity.moduleplugin' version '1.8.11'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

repositories {
    jcenter()
}

group = 'com.tobiasdiez'
version = '2.2.1-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9
// Ensure Java 8 compatibility while providing proper module description
// See https://github.com/java9-modularity/gradle-modules-plugin#separate-compilation-of-module-infojava
//modularity.mixedJavaRelease 8
//modularity.standardJavaRelease 9

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.8.2'
}

java {
    withJavadocJar()
    withSourcesJar()
}

javafx {
    version = "17"
    modules = ['javafx.base']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'easybind'
            from components.java
            pom {
                name = 'EasyBind'
                description = 'Factory methods for easy creation of JavaFX bindings using lambdas.'
                url = 'https://github.com/tobiasdiez/EasyBind'

                licenses {
                    license {
                        name = 'The BSD 2-Clause License'
                        url = 'http://opensource.org/licenses/BSD-2-Clause'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'tobiasdiez'
                        name = 'Tobias Diez'
                    }
                    developer {
                        name = 'Tomas Mikula'
                    }
                }
                scm {
                    url = 'https://github.com/tobiasdiez/EasyBind'
                    connection = 'scm:git:git://github.com/tobiasdiez/EasyBind.git'
                    developerConnection = 'scm:git:git@github.com/tobiasdiez/EasyBind.git'
                }
            }

            // Remove os-specific 'classifier' in pom for JavaFX dependency
            // Taken from https://github.com/TestFX/Monocle/issues/64#issuecomment-489215444
            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.groupId.text() == 'org.openjfx'
                }.each {
                    it.remove(it.classifier)
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        // This currently only works for released versions, as github has problems with overwriting snapshots
        if (isReleaseVersion) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/tobiasdiez/EasyBind"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

signing {
    required = isReleaseVersion
    useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    sign publishing.publications.mavenJava
}

nexusStaging {
    username = System.getenv("MAVEN_USERNAME")
    password = System.getenv("MAVEN_PASSWORD")
}

// Don't publish snapshots to Maven Central
closeAndReleaseRepository.onlyIf { isReleaseVersion }
closeRepository.onlyIf { isReleaseVersion }
releaseRepository.onlyIf { isReleaseVersion }

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

tasks.withType(Javadoc) {
    // Ignore warnings because of missing elements
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}
